"""Shared data access helpers and abstract contracts.

Note: Full DynamoDB + S3 integration (T037+) will replace the simple
in-memory stubs used here. For now we keep logic minimal so contract tests
for the API layer can be wired later without external dependencies.
"""

from __future__ import annotations
from dataclasses import dataclass
from typing import Protocol, List, Optional, Dict, Any


@dataclass
class ServiceContext:
    table_name: str
    images_bucket: str
    dynamodb_client: Any  # boto3 client (to be injected later)
    s3_client: Any  # boto3 client (to be injected later)


class AlbumServiceProtocol(Protocol):
    def list_albums(self, user_id: str) -> List[Dict]: ...
    def create_album(self, user_id: str, name: str, description: Optional[str]) -> Dict: ...
    def get_album(self, user_id: str, album_id: str) -> Optional[Dict]: ...
    def update_album(self, user_id: str, album_id: str, name: Optional[str], description: Optional[str]) -> Optional[Dict]: ...
    def delete_album(self, user_id: str, album_id: str) -> bool: ...


class ImageServiceProtocol(Protocol):
    def list_images(self, user_id: str, album_id: str) -> List[Dict]: ...
    def create_image(self, user_id: str, album_id: str, name: str, description: Optional[str], size: int) -> Dict: ...
    def get_image(self, user_id: str, album_id: str, image_id: str) -> Optional[Dict]: ...
    def update_image(self, user_id: str, album_id: str, image_id: str, name: Optional[str], description: Optional[str]) -> Optional[Dict]: ...
    def delete_image(self, user_id: str, album_id: str, image_id: str) -> bool: ...


class QuotaServiceProtocol(Protocol):
    def get_quota(self, user_id: str) -> Dict: ...
    def add_usage(self, user_id: str, bytes_added: int) -> None: ...
    def subtract_usage(self, user_id: str, bytes_removed: int) -> None: ...
